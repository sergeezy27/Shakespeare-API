<?php
/*
This class contains functions for routine data operations like loading form data and saving/updating records to database tables.

To interact with a specific database table, create an object that extends this class and whose fields match that tables columns.

DO NOT EDIT THIS FILE - core ORM framework functionality
*/

class data_operations {

  public $table;
  public $id_field;
  public $fields;
  public $values;

  protected $id_value;        // Used internally to store Primary Key Value
  protected $id_field_is_ai;  // Used internally for SQL INSERT vs UPDATE logistics
  protected $id_value_temp;   // Temporary storage for NON-AI id_value before SQL INSERT

  //////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////
  function data_operations($table, $id_field, $is_ai=true, $fields) {
      //  Constructor Function

      $this->table = $table;
      $this->id_field = $id_field;
      $this->fields = $fields;

      foreach ($this->fields as $field){
        $this->values[$field] = '';
      }
      $this->id_field_is_ai = $is_ai;
      $this->id_value = '';
      $this->id_value_temp = '';
  }
  //////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function get_id_value() {
      // Getter for protected $id_value
      // Will be empty for an object not yet saved to database.
      return $this->id_value;
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function set_id_value($non_ai_id_value) {
      // Setter for protected $id_value
      if ($this->id_field_is_ai) {
        $error = "ERROR - ORM FRAMEWORK: Attempting to manually set_id_value() for Auto-Increment Primary Key";
        echo $error;
        exit;
      }
      else {
        // AI field is not Auto-Increment
        if ($this->id_value !== '') {
          $error  = "ERROR - ORM FRAMEWORK: Attempting to set_id_value() that's already populated. ";
          $error .= "Don't change Primary Key value of an Active Record. Load new Active Record";
          echo $error;
          exit;
        }
        else {
          // Insert method copies from temp to actual id_value
           $this->id_value_temp = $non_ai_id_value;
        }
      }
  }


  //////////////////////////////////////////////////////////////////////////////////////////////////
  function load($value, $field = '') {
      // Loads a whole database record as Active Record (AR) given a Primary Key value
      // Defaults to loading from primary key field.
      // Otherwise a unique field must be specified as second argument.

      if ($value === "") {return;}

      // Defaults to loading from primary key field if no field specified
      if (!$field) {
        $field = $this->id_field;
      }

      $query = "SELECT * FROM " . $this->table . " WHERE  $field  =  '$value'";
      $result = lib::db_query($query);

      if ($result->num_rows == 1) {
        $row = $result->fetch_assoc();
        $this->id_value =  $row[$this->id_field];
        foreach ($this->fields as $field) {
          $this->values[$field] = $row[$field];
        }
      }
      else if ($result->num_rows > 1) {
        $error = "ERROR - ORM FRAMEWORK: Attempting to load() a database record resulted in more than one row. ";
        $error .= "Trying to load from a non-unique field?";
        echo $error;
        exit;
      }
      else {
        // 0 rows - null fill the object
        $this->values = array_fill(0, count($this->fields), null);
      }
      $this->sql_unsafe();
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function load_from_form_submit() {
      // loads $this->values with submitted form data whose names match fields in $this->fields
      // the values for any fields with no incoming form data are set to blank since $_REQUEST will be empty

      $this->id_value = $_REQUEST[$this->id_field];
      foreach ($this->fields as $field) {
        if (is_array($_REQUEST[$field])) {
          // Just load into the object field
          $this->values[$field] = $_REQUEST[$field];
        }
        else {
          // Trim the string
          $this->values[$field] = trim($_REQUEST[$field]);
        }
      }
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function update_from_form_submit() {
      // same as load_from_form_submit() except that only fields with incoming form values
      // update the object, leaving other pre-populated values intact

      if ($_REQUEST[$this->id_field]) {
        $this->id_value = $_REQUEST[$this->id_field];
      }
      foreach ($this->fields as $field) {
        if (isset($_REQUEST[$field])) {
          $this->values[$field] = trim($_REQUEST[$field]);
        }
      }
  }


  //////////////////////////////////////////////////////////////////////////////////////////////////
  function save() {
      // SQL INSERT or UPDATE depending upon whether $this->id_value is populated

      if ($this->id_value === "") {
        if ($this->id_field_is_ai) {
          $this->insert();
        }
        else {
          if($this->id_value_temp === "") {
            echo "ERROR - ORM FRAMEWORK: Use set_id_value() to populate NON Auto-Increment Primary Key before saving object.";
            exit;
          }
          else {
            $this->insert();
          }
        }
      }
      else {
        // id_value is set so do the update
        $this->update();
      }
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function insert() {
      // Implements the SQL INSERT for save() method

      $this->sql_safe();
      if (!$this->id_field_is_ai) {
        // Must add the non-pk field and value to the INSERT statement
        $non_pk_field = $this->id_field . ", ";
        $non_pk_value = "'" . $this->id_value_temp . "', ";  // Always treat as string
      }

      $query = "INSERT INTO " . $this->table . "($non_pk_field";
      $query.= implode(', ', $this->fields);
      $query.= ") VALUES ($non_pk_value";
      $query.= "'" . implode("', '", $this->values) . "'";
      $query.= ")";

      lib::db_query($query);
      $this->sql_unsafe();

      // After the save, designate $this as an active record
      if ($this->id_field_is_ai) {
        // Have to ask mySQL for the new AI PK value
        global $mysqli;
        $this->id_value = mysqli_insert_id($mysqli);
      }
      else {
        $this->id_value = $this->id_value_temp;
      }
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function update() {
      // Implements the SQL UPDATE for save() method

      $this->sql_safe();
      $query = "UPDATE " . $this->table . " SET ";
      foreach ($this->fields as $field) {
        $value = $this->values[$field];
        $query.= "" . $field . " = '" . $value . "', ";
      }
      $query = substr($query, 0, -2); //Remove the trailing ", "
      $query.= " WHERE " . $this->id_field . " = '" . $this->id_value . "'";
      lib::db_query($query);
      $this->sql_unsafe();
  }


  //////////////////////////////////////////////////////////////////////////////////////////////////
  function delete($obj_id) {
      // Implements SQL DELETE given a primary key value

      $query = "DELETE FROM " . $this->table . " WHERE " . $this->id_field . " = '" . $obj_id . "'";
      lib::db_query($query);
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function sql_safe() {
      if ($this->id_value !== '') {
        $this->id_value = addslashes(stripslashes($this->id_value));
      }
      foreach ($this->fields as $field) {
        if (!is_null($this->values[$field])) {
            $this->values[$field] = addslashes(stripslashes($this->values[$field]));
        }
      }
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function sql_unsafe() {
      if ($this->id_value !== '') {
        $this->id_value = stripslashes($this->id_value);
      }
      foreach ($this->fields as $field){
        if (!is_null($this->values[$field])){
            $this->values[$field] = stripslashes($this->values[$field]);
        }
      }
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function html_safe() {
      // Use before adding object fields to html attributes such as value=""
      // Converts reserved characters in HTML quotations to html entities (e.g." becomes &quot;)
      if ($this->id_value !== '') {
        $this->id_value = htmlentities($this->id_value,ENT_QUOTES);
      }
      foreach ($this->fields as $field){
        if (!is_null($this->values[$field])){
            $this->values[$field] = htmlentities($this->values[$field],ENT_QUOTES);
        }
      }
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function html_unsafe() {
      // converts html entities (e.g. &quot;) back to the ASCII character
      if ($this->id_value !== '') {
        $this->id_value = html_entity_decode($this->id_value,ENT_QUOTES);
      }
      foreach ($this->fields as $field){
        if (!is_null($this->values[$field])){
            $this->values[$field] = html_entity_decode($this->values[$field],ENT_QUOTES);
        }
      }
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function save_to_session($prefix="sess_") {
      // Saves the Active Record object to SESSION as an associative array
      // Field names are prefixed (sess_) so the SESSION keys are different from other session data.

      $_SESSION[$prefix.$this->id_field] = $this->id_value;
      foreach ($this->fields as $field) {
        $sess_fieldname = $prefix.$field;
        $_SESSION[$sess_fieldname] = $this->values[$field];
      }
      $query = "SELECT " . $this->id_field . ",";
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function load_from_session($prefix="sess_") {
       // Loads an Active Record object that has been saved into SESSION by save_to_session()

      $this->id_value = $_SESSION[$prefix.$this->id_field];
      foreach ($this->fields as $field) {
        $sess_fieldname = $prefix.$field;
        $this->values[$field] = $_SESSION[$sess_fieldname];
      }
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function wipe_from_session($prefix="sess_") {
      // Wipes an Active Record object that has been saved to SESSION

      unset($_SESSION[$prefix.$this->id_field]);
      foreach ($this->fields as $field) {
          $sess_fieldname = $prefix.$field;
          unset($_SESSION[$sess_fieldname]);
      }
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function hide_in_form() {
      // Writes all Active Record object fields to hidden form elements
      $this->html_safe();
      echo '<input type="hidden" name="'.$this->id_field.'" value="'.$this->id_value.'">'."\n";
      foreach ($this->fields as $field) {
        echo '<input type="hidden" name="'.$field.'" value="'.$this->values[$field].'">'."\n";
      }
      $this->html_unsafe();
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////
  function load_from_hidden() {
      // Recovers all Active Record object fields from hidden form element
      $this->id_value = $_REQUEST[$this->id_field];
      foreach ($this->fields as $field) {
        $value = $_REQUEST[$field];
        $this->values[$field] = $value ;
      }
      $this->html_unsafe();
  }

  // CAUTION: Don't use this on tables with lots of records.
  //////////////////////////////////////////////////////////////////////////////////////////////////
  function load_table($sortby='', $sortorder="ASC") {
      // loads the whole table into a mysql result set

      if ($sortby=='') {
        $sortby = $this->id_field;
      }
      $query = "SELECT " . $this->id_field . ",";
      $query.= implode(',', $this->fields);
      $query.= " FROM " . $this->table;
      $query.= " ORDER BY " . $sortby . " $sortorder";
      $result = lib::db_query($query);
      return $result;
  }



} //end CLASS data_operations

?>